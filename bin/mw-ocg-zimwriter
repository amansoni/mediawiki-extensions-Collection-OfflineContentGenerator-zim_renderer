#!/usr/bin/env node
require('core-js/shim');
var Promise = require('../lib/promise.js');

var program = require('commander');
var util = require('util');
var zimwriter = require('../');

program
	.version(zimwriter.version)
	.usage('[options] <bundle.zip>')
	.option('-o, --output <filename>',
			'Save text to the given <filename>', null)
	.option('-v, --verbose',
			'Print verbose progress information')
	.option('-D, --debug',
			'Turn on debugging features (eg, full stack traces on exceptions)')
	.option('-T, --temporary-directory <dir>',
			'Use <dir> for temporaries, not $TMPDIR or /tmp', null);

program.parse(process.argv);

if (program.args.length === 0) {
	console.error('A bundle filename is required.');
	return 1;
}
if (program.args.length > 1) {
	console.error('Too many arguments.');
	return 1;
}

var bundlefile = program.args[0];

var log = function() {
	try {
		// en/disable log messages here
		if (program.verbose || program.debug) {
			console.error.apply(console, arguments);
		}
		if (process.send) {
			process.send({
				type: 'log',
				level: 'info',
				message: util.format.apply(null, arguments)
			});
		}
	} catch (err) {
		// This should never happen!  But don't try to convert arguments
		// toString() if it does, since that might fail too.
		console.error("Could not format message!", err);
		if (process.send) {
			process.send({
				type: 'log',
				level: 'error',
				message: 'Could not format message! ' + err,
				stack: err.stack
			});
		}
	}
};

var options = {
	bundle: bundlefile,
	debug: !!program.debug,
	output: program.output,
	tmpdir: program.temporaryDirectory,
	log: log
};

zimwriter.convert(options).catch(function(err) {
	var msg = {
		type: 'log',
		level: 'error'
	};
	if ( err instanceof Error ) {
		msg.message = err.message;
		msg.stack = err.stack;
	} else {
		msg.message = '' + err;
	}
	console.error( (program.debug && msg.stack) || msg.message );
	// process.send is sync, so we won't exit before this is sent (yay)
	if (process.send) {
		process.send(msg);
	}
	process.exit(err.exitCode || 1);
}).done();
